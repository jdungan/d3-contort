// Generated by CoffeeScript 1.7.1
(function() {
  var Transform, degreeValue, name, xyValue, _fn, _i, _len, _ref;

  xyValue = (function() {
    function xyValue(x, y) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
    }

    xyValue.prototype.setValue = function(newValue, increment) {
      switch (typeof newValue) {
        case 'number':
          if (increment) {
            this.x += newValue;
            return this.y += newValue;
          } else {
            this.x = newValue;
            return this.y = newValue;
          }
          break;
        case 'object':
          if (increment) {
            this.x += newValue.x != null ? newValue.x : newValue.x = newValue.x;
            return this.y += newValue.y != null ? newValue.y : newValue.y = newValue.x;
          } else {
            this.x = newValue.x != null ? newValue.x : newValue.x = newValue.x;
            return this.y = newValue.y != null ? newValue.y : newValue.y = newValue.x;
          }
      }
    };

    xyValue.prototype.toString = function() {
      return this.x + "," + this.y;
    };

    return xyValue;

  })();

  degreeValue = (function() {
    function degreeValue(number) {
      this.number = number != null ? number : 0;
    }

    degreeValue.prototype.setValue = function(newValue, increment) {
      if (increment) {
        newValue += this.number;
      }
      if (this.number !== newValue) {
        return this.number = Math.round(newValue % 360 + (newValue >= 0 ? 0 : 360));
      }
    };

    degreeValue.prototype.toString = function() {
      return this.number;
    };

    return degreeValue;

  })();

  Transform = (function() {
    function Transform() {
      if (this.translate == null) {
        this.translate = new xyValue(0, 0);
      }
      if (this.scale == null) {
        this.scale = new xyValue(1, 1);
      }
      if (this.rotate == null) {
        this.rotate = new degreeValue;
      }
      if (this.skewX == null) {
        this.skewX = new degreeValue;
      }
      if (this.skewY == null) {
        this.skewY = new degreeValue;
      }
    }

    return Transform;

  })();

  Transform.prototype.order = function() {
    return ["translate", "scale", "rotate", "skewX", "skewY"];
  };

  Transform.prototype.toString = function() {
    return this.order().map(function(name) {
      return name + "(" + this[name].toString() + ")";
    }, this).join(" ");
  };

  _ref = Transform.prototype.order();
  _fn = function(name) {
    return d3.selection.prototype[name] = function(value, increment) {
      var e, i, len, _fn1, _j, _len1, _ref1;
      if (increment == null) {
        increment = false;
      }
      len = this[0].length;
      _ref1 = this[0];
      _fn1 = function(e) {
        if (e.__transform__ == null) {
          e.__transform__ = new Transform;
        }
        switch (typeof value) {
          case 'number':
          case 'object':
            return e.__transform__[name].setValue(value, increment);
          case 'function':
            return e.__transform__[name].setValue(value(e.__data__, i, len), increment);
        }
      };
      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
        e = _ref1[i];
        _fn1(e);
      }
      return this;
    };
  };
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    _fn(name);
  }

  d3.selection.prototype.render = function() {
    var e, _fn1, _j, _len1, _ref1;
    _ref1 = this[0];
    _fn1 = function(e) {
      if (e.__transform__ == null) {
        e.__transform__ = new Transform;
      }
      return e.setAttribute("transform", e.__transform__.toString());
    };
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      e = _ref1[_j];
      _fn1(e);
    }
    return this;
  };

  d3.selection.prototype.animate = function(options) {
    var delay, duration, e, ease, opacity, _fn1, _j, _len1, _ref1;
    if (options == null) {
      options = {};
    }
    duration = options.duration != null ? options.duration : options.duration = 500;
    ease = options.ease != null ? options.ease : options.ease = "ease";
    opacity = options.opacity != null ? options.opacity : options.opacity = "1";
    delay = options.delay != null ? options.delay : options.delay = 0;
    _ref1 = this[0];
    _fn1 = function(e) {
      if (e.__transform__ == null) {
        e.__transform__ = new Transform;
      }
      return d3.select(e).transition().duration(duration).delay(delay).ease(d3.ease(ease)).attr({
        transform: e.__transform__.toString(),
        "opacity": opacity
      });
    };
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      e = _ref1[_j];
      _fn1(e);
    }
    return this;
  };

}).call(this);

//# sourceMappingURL=d3-contort.map
